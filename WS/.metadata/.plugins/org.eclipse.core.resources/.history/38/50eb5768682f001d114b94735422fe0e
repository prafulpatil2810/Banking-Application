package in.banking.user1.services;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import in.banking.user1.entities.AccountHolder;
import in.banking.user1.exceptions.AccountHolderException;
import in.banking.user1.repos.AccountHolderRepo;

@ExtendWith(MockitoExtension.class)
@DisplayName("AccountHolderServiceImpl")
public class AccountHolderServiceImplTest {
	
	@Mock
	AccountHolderRepo accRepo;
	
	AccountHolderServiceImpl accServiceImpl;
	
	@BeforeEach
	void init() {
		accServiceImpl = new AccountHolderServiceImpl(accRepo);
	}
	
	@AfterEach
	void clean() {
		accServiceImpl = null;
	}
	
	@Test
	@DisplayName("#getById should return a record given existing id")
	void testGetByIdPositiveCase() throws AccountHolderException{
		long testData = 101;
		AccountHolder expected = new AccountHolder(101L, "Praful Patil", "7387344522", "praful.rp28@gmail.com");
		Mockito.when(accRepo.getById(testData)).thenReturn(expected);
		AccountHolder actual = accServiceImpl.getById(testData);
		assertEquals(expected, actual);
	}
	
	@Test
	@DisplayName("#getById should return a null given a non-existing id")
	void testGetByIdNegativeCase() throws AccountHolderException{
		long testData = 101;
		Mockito.when(accRepo.getById(testData)).thenReturn(null);
		assertNull(accServiceImpl.getById(testData));
	}

}
