package in.banking.user1.services;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.Mockito.when;

import java.util.Arrays;
import java.util.List;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import in.banking.user1.entities.AccountHolder;
import in.banking.user1.exceptions.AccountHolderException;
import in.banking.user1.repos.AccountHolderRepo;

@ExtendWith(MockitoExtension.class)
@DisplayName("AccountHolderServiceImpl")
public class AccountHolderServiceImplTest {

	private AccountHolderServiceImpl ahServiceImpl;
	
	@Mock
	private AccountHolderRepo ahRepo;

	@BeforeEach
	void init() {
		ahServiceImpl = new AccountHolderServiceImpl(ahRepo);
	}

	@AfterEach
	void clean() {
		ahServiceImpl = null;
	}

	@Test
	@DisplayName("#getAll should return values that exists")
	void testGetAll() throws AccountHolderException {
		AccountHolder[] ahArr = new AccountHolder[] {
				new AccountHolder((long) 1, "Ajay Patil", "1234567890", "ajaypatil123@gmail.com"),
				new AccountHolder((long) 2, "Ajay More", "1234567890", "ajaypatil123@gmail.com") };
		List<AccountHolder> expected = Arrays.asList(ahArr);
		Mockito.when(ahServiceImpl.getAll()).thenReturn(expected);
		List<AccountHolder> actual = ahServiceImpl.getAll();
		assertEquals(actual, expected);
	}

	@Test
	@DisplayName("#ExistsById")
	void testExistById() {
		long ahId = (long) 1;
		when(ahRepo.existsById(ahId)).thenReturn(true);
		assertEquals(true, ahServiceImpl.existsById(ahId));
	}
	
	@Test
	@DisplayName("#addUser")
	void testAddAccountHolder() throws AccountHolderException{
		AccountHolder ah = new AccountHolder((long) 1, "Aniket Nigade", "1234567890", "nigade123@gmail.com");
		when(ahRepo.save(ah)).thenReturn(ah);
		assertEquals(ah, ahServiceImpl.add(ah));
	}
	
	/*
	 * @Test
	 * 
	 * @DisplayName("#getById") void testGetById() { long ahId = 1L; AccountHolder
	 * expected = new AccountHolder(1L, "Aniket Nigade", "1234567890",
	 * "nigade123@gmail.com"); System.out.println(expected);
	 * Mockito.when(ahRepo.getReferenceById(ahId)).thenReturn(expected);
	 * System.out.println(ahServiceImpl.getById(ahId)); assertEquals(expected,
	 * ahServiceImpl.getById(ahId));
	 * 
	 * }
	 */
	
	@Test
	@DisplayName("#if accountHolder name is empty")
	void testFullName() {
         AccountHolderException thrown = assertThrows(AccountHolderException.class, () -> {
        	 AccountHolder ah = new AccountHolder(1L, null, "1234567890", "nigade123@gmail.com");
        	 Mockito.when(ahServiceImpl.add(ah)).thenReturn(ah);
         });
         assertEquals("FullName cannot be empty", thrown.getMessage());
   }

}
